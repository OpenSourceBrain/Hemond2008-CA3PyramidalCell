begintemplate ca3pyramidalcell

//public init, tolpol, subset, geom, biophys, geom_nseg 
public init, all, dendrite_list, apical_dendrite_list, soma, dendrite, apical_dendrite, axon

create soma[1], dendrite[52], apical_dendrite[81], axon[1]


proc init() {
  topol()
  subsets()
  geom()  
  biophys() 
  geom_nseg()
}

proc topol() {
    xopen("geo-cell1zr.hoc") 
}

objref all, dendrite_list, apical_dendrite_list
proc subsets() { local i
  objref all, dendrite_list, apical_dendrite_list

  all = new SectionList()
    soma[0] all.append()
    for i=0, 51 dendrite[i] all.append()
    for i=0, 80 apical_dendrite[i] all.append()
    axon[0] all.append()

  dendrite_list = new SectionList()
    for i=0, 51 dendrite[i] dendrite_list.append()

  apical_dendrite_list = new SectionList()
    for i=0, 80 apical_dendrite[i] apical_dendrite_list.append()
}

proc geom() {
}

func lambda_f() { local i, x1, x2, d1, d2, lam
        if (n3d() < 2) {
                return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
        }
        // above was too inaccurate with large variation in 3d diameter
        // so now we use all 3-d points to get a better approximate lambda
        x1 = arc3d(0)
        d1 = diam3d(0)
        lam = 0
        for i=1, n3d()-1 {
                x2 = arc3d(i)
                d2 = diam3d(i)
                lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2   d1 = d2
        }
        //  length of the section in units of lambda
        lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)

        return L/lam
}

proc geom_nseg() {
    soma area(0.5) // make sure diam reflects 3d points
        //freq = 100 // Hz, frequency at which AC length constant will be computed //d_lambda = 0.1 //forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1}        
    forall { nseg = int((L/(0.1*lambda_f(100))+0.9)/2)*2 + 1  }
}

proc biophys() {

    access soma

    Vrest = -64
    celsius = 35.0

    RaAll = 150
    Rm = 25370
    Cm = 1.41
    AXONM = 5

    ghd = 1.e-5
    gna = 0.022
    gkdr = 0.005
    KMULT = 0.02
    gkm = 0.017
    gkd = 0.
    gc = 1.e-5
    gKc = 5e-5
    gahp = 0.0001



    soma {
	    insert ds
	    insert hd
            ghdbar_hd = ghd 
        insert na3
            gbar_na3 = gna 
        insert kdr
            gkdrbar_kdr = gkdr 
	    insert kap
            gkabar_kap = KMULT
	    insert km
            gbar_km = gkm
	    insert kd
            gkdbar_kd = gkd
	    insert cacum
            depth_cacum = diam/2
        insert cal
            gcalbar_cal = gc
        insert can
            gcanbar_can = gc
        insert cat
            gcatbar_cat = gc
	    insert cagk
            gbar_cagk= gKc 
	    insert KahpM95
            gbar_KahpM95 = gahp

        insert pas
            e_pas = Vrest
            g_pas = 1/Rm
        Ra = RaAll
        cm = Cm
    }

    forsec dendrite_list {
	    insert ds
	    insert hd
            ghdbar_hd = ghd
        insert na3
            gbar_na3 = gna
        insert kdr
            gkdrbar_kdr = gkdr 
	    insert kap
            gkabar_kap = KMULT
	    insert cacum
            depth_cacum = diam/2
        insert cal
            gcalbar_cal = gc
        insert can
            gcanbar_can = gc
        insert cat
            gcatbar_cat=gc
	    insert cagk
            gbar_cagk= gKc 
	    insert KahpM95
            gbar_KahpM95 = gahp

        insert pas
            e_pas = Vrest
            g_pas = 1/Rm
        Ra = RaAll
        cm = Cm
    }

    forsec apical_dendrite_list {
	    insert ds
	    insert hd
            ghdbar_hd = ghd
        insert na3
            gbar_na3 = gna
        insert kdr
            gkdrbar_kdr = gkdr 
	    insert kap
            gkabar_kap = KMULT
	    insert cacum
            depth_cacum = diam/2
        insert cal
            gcalbar_cal = gc
        insert can
            gcanbar_can = gc
        insert cat
            gcatbar_cat=gc
	    insert cagk
            gbar_cagk= gKc 
	    insert KahpM95
            gbar_KahpM95 = gahp

        insert pas
            e_pas = Vrest
            g_pas = 1/Rm
        Ra = RaAll
        cm = Cm
    }

    axon {
        insert na3
            gbar_na3 = gna*AXONM 
        insert kdr
            gkdrbar_kdr = gkdr
        insert kap
            gkabar_kap = KMULT
            sh_kap = 0

        insert pas
            e_pas = Vrest
            g_pas = 1/Rm
        Ra = RaAll/3
        cm = Cm
    }


    forall { v = Vrest ek = -90 ena = 55 }

    forall if(ismembrane("hd")) {ehd_hd=-30}

    forall for(x) {
	if (ismembrane("cal")) {e_pas(x)=v(x)+(i_hd(x)+ina(x)+ik(x)+ica(x))/g_pas(x)
		} else {
		e_pas(x)=v(x)+(ina(x)+ik(x))/g_pas(x)
		}
	}
}


endtemplate ca3pyramidalcell 
